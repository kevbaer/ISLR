---
title: "ISLR_Cha_8"
format: html
editor: visual
---

```{r}
library(tidymodels)
library(ISLR)
library(rpart.plot)
library(vip)

data("Boston", package = "MASS")
Boston <- as_tibble(Boston)
```

```{r}
Carseats <- as_tibble(Carseats) |> 
  mutate(High = factor(if_else(Sales <= 8, "No", "Yes"))) |> 
  select(-Sales)
```

```{r}
tree_spec <- decision_tree() |> 
  set_engine("rpart")

class_tree_spec <- tree_spec |> 
  set_mode("classification")

class_tree_fit <- class_tree_spec |> 
  fit(High ~ ., data = Carseats)

class_tree_fit
```

```{r}
class_tree_fit |> 
  extract_fit_engine() |> 
  rpart.plot()
```

```{r}
augment(class_tree_fit, new_data = Carseats) |> 
  accuracy(truth = High, estimate = .pred_class)
```

```{r}
augment(class_tree_fit, new_data = Carseats) |> 
  conf_mat(truth = High, estimate = .pred_class)
```

```{r}
set.seed(1234)
Carseats_split <- initial_split(Carseats)

Carseats_train <- training(Carseats_split)
Carseats_test <- testing(Carseats_split)
```

```{r}
class_tree_fit <- fit(class_tree_spec, High ~ ., data = Carseats_train)
```

```{r}
augment(class_tree_fit, new_data = Carseats_test) |> 
  conf_mat(truth = High, estimate = .pred_class)
```

```{r}
augment(class_tree_fit, new_data = Carseats_test) |> 
  accuracy(truth = High, estimate = .pred_class)
```

```{r}
class_tree_wf <- workflow() |> 
  add_model(class_tree_spec |> set_args(cost_complexity = tune())) |> 
  add_formula(High ~ .)

set.seed(1234)
Carseats_fold <- vfold_cv(Carseats_train)

param_grid <- grid_regular(cost_complexity(range = c(-3, -1)), levels = 10)

tune_res <- tune_grid(
  class_tree_wf,
  resamples = Carseats_fold,
  grid = param_grid,
  metrics = metric_set(accuracy)
)
```

```{r}
theme_set(theme_bw(base_family = "Barlow", base_size = 16))
autoplot(tune_res)
```

```{r}
best_complexity <- select_best(tune_res)
class_tree_final <- finalize_workflow(class_tree_wf, best_complexity)

class_tree_final_fit <- fit(class_tree_final, data = Carseats_train)

class_tree_final_fit
```

```{r}
class_tree_final_fit |> 
  extract_fit_engine() |> 
  rpart.plot()
```

```{r}
reg_tree_spec <- tree_spec |> 
  set_mode("regression")
```

```{r}
set.seed(1234)
Boston_split <- initial_split(Boston)

Boston_train <- training(Boston_split)
Boston_test <- testing(Boston_split)
```

```{r}
reg_tree_fit <- fit(reg_tree_spec, medv ~ ., Boston_train)
reg_tree_fit
```

```{r}
augment(reg_tree_fit, new_data = Boston_test) |> 
  rmse(truth = medv, estimate = .pred)
```

```{r}
reg_tree_fit  |> 
  extract_fit_engine()  |> 
  rpart.plot()
```

```{r}
reg_tree_wf <- workflow()  |> 
  add_model(reg_tree_spec  |> set_args(cost_complexity = tune()))  |> 
  add_formula(medv ~ .)

set.seed(1234)
Boston_fold <- vfold_cv(Boston_train)

param_grid <- grid_regular(cost_complexity(range = c(-4, -1)), levels = 10)

tune_res <- tune_grid(
  reg_tree_wf, 
  resamples = Boston_fold, 
  grid = param_grid
)
```

```{r}
autoplot(tune_res)
```

```{r}
best_complexity <- select_best(tune_res, metric = "rmse")

reg_tree_final <- finalize_workflow(reg_tree_wf, best_complexity)

reg_tree_final_fit <- fit(reg_tree_final, data = Boston_train)
reg_tree_final_fit
```

```{r}
reg_tree_final_fit  |> 
  extract_fit_engine()  |> 
  rpart.plot()
```
