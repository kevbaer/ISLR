---
title: "ISLR_Chap_9"
format: html
editor: visual
---

```{r}
library(tidymodels)
library(ISLR)

theme_set(theme_bw(base_family = "Barlow", base_size = 16))
```

```{r}
set.seed(1)
sim_data <- tibble(
  x1 = rnorm(40),
  x2 = rnorm(40),
  y = factor(rep(c(-1, 1),20)),
) |> 
  mutate(x1 = if_else(y == 1, x1 + 1.5, x1),
         x2 = if_else(y == 1, x2 + 1.5, x2))
```

```{r}
ggplot(sim_data) +
  aes(x1, x2, color = y) +
  geom_point()
```

```{r}
svm_linear_spec <- svm_poly(degree = 1) |> 
  set_mode("classification") |> 
  set_engine("kernlab", scaled = FALSE)

svm_linear_fit <- svm_linear_spec |> 
  set_args(cost = 10) |> 
  fit(y ~ ., data = sim_data)

svm_linear_fit
```

```{r}
library(kernlab)

svm_linear_fit |> 
  extract_fit_engine() |> 
  plot()
```

```{r}
svm_linear_wf <- workflow() |> 
  add_model(svm_linear_spec |> set_args(cost = tune())) |> 
  add_formula(y ~ .)

set.seed(1234)
sim_data_fold <- vfold_cv(sim_data, strata = y)

param_grid <- grid_regular(cost(), levels = 10)
tune_res <- tune_grid(
  svm_linear_wf,
  resamples = sim_data_fold,
  grid = param_grid
)
```

```{r}
autoplot(tune_res)
```

```{r}
best_cost <- select_best(tune_res, metric = "accuracy")

svm_linear_final <- finalize_workflow(svm_linear_wf, best_cost)

svm_linear_fit <- svm_linear_final |> fit(sim_data)
```

```{r}
set.seed(2)
sim_data_test <- tibble(
  x1 = rnorm(20),
  x2 = rnorm(20),
  y = factor(rep(c(1, -1), 10))
) |> mutate(
  x1 = if_else(y == 1, x1 + 1.5, x1),
  x2 = if_else(y == 1, x2 + 1.5, x2)
)
```

```{r}
augment(svm_linear_fit, new_data = sim_data_test) |> 
  conf_mat(truth = y, estimate = .pred_class)
```

```{r}
set.seed(1)
sim_data2 <- tibble(
  x1 = rnorm(200) + rep(c(2, -2, 0), c(100, 50, 50)),
  x2 = rnorm(200) + rep(c(2, -2, 0), c(100, 50, 50)),
  y  = factor(rep(c(1, 2), c(150, 50)))
)

sim_data2 |> 
  ggplot(aes(x1, x2, color = y)) +
  geom_point()
```

```{r}
svm_rbf_spec <- svm_rbf() |> 
  set_mode("classification") |> 
  set_engine("kernlab")

svm_rbf_fit <- svm_rbf_spec |> fit(y ~ ., data = sim_data2)

svm_rbf_fit |> 
  extract_fit_engine() |> 
  plot()
```

```{r}
set.seed(2)
sim_data2_test <- tibble(
  x1 = rnorm(200) + rep(c(2, -2, 0), c(100, 50, 50)),
  x2 = rnorm(200) + rep(c(2, -2, 0), c(100, 50, 50)),
  y  = factor(rep(c(1, 2), c(150, 50)))
)
```

```{r}
augment(svm_rbf_fit, new_data = sim_data2_test) |> 
  conf_mat(truth = y, estimate = .pred_class)
```

```{r}
svm_rbf_fit |> 
  augment(new_data = sim_data2_test) |> 
  roc_curve(truth = y, .pred_1) |> 
  autoplot()
```

```{r}
svm_rbf_fit |> 
  augment(new_data = sim_data2_test) |> 
  roc_auc(truth = y, .pred_1)
```

```{r}
Khan_train <- bind_cols(
  y = factor(Khan$ytrain),
  as_tibble(Khan$xtrain)
)

Khan_test <- bind_cols(
  y = factor(Khan$ytest),
  as_tibble(Khan$xtest)
)
```

```{r}
dim(Khan_train)
```

```{r}
khan_fit <- svm_linear_spec |> 
  set_args(cost = 10) |> 
  fit(y ~ ., data = Khan_train)

khan_fit |> 
  augment(new_data = Khan_train) |> 
  conf_mat(truth = y, estimate = .pred_class)
```

```{r}
khan_fit |> 
  augment(new_data = Khan_test) |> 
  conf_mat(truth = y, estimate = .pred_class)
```
